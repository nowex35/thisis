---
// GitHub API Integration Component
const githubUsername = "nowex35";
---

<div class="github-stats-container" id="github-stats">
  <div class="stats-header">
    <h3 class="stats-title">
      <span class="github-icon">üìä</span>
      GitHub Activity
    </h3>
    <div class="stats-loading" id="stats-loading">
      <div class="loading-spinner"></div>
      <span>Loading...</span>
    </div>
  </div>
  
  <div class="stats-content" id="stats-content" style="display: none;">
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-icon">üî•</div>
        <div class="stat-data">
          <span class="stat-value" id="commit-count">-</span>
          <span class="stat-label">Commits (30d)</span>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-icon">üìÅ</div>
        <div class="stat-data">
          <span class="stat-value" id="repo-count">-</span>
          <span class="stat-label">Repositories</span>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-icon">‚≠ê</div>
        <div class="stat-data">
          <span class="stat-value" id="star-count">-</span>
          <span class="stat-label">Stars</span>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-icon">üåç</div>
        <div class="stat-data">
          <span class="stat-value" id="language-primary">-</span>
          <span class="stat-label">Primary Language</span>
        </div>
      </div>
    </div>
    
    <div class="language-chart" id="language-chart">
      <h4 class="chart-title">Language Distribution</h4>
      <div class="language-summary" id="language-summary"></div>
    </div>
    
    <div class="recent-activity" id="recent-activity">
      <h4 class="activity-title">Recent Activity</h4>
      <div class="activity-timeline" id="activity-timeline"></div>
    </div>
  </div>
  
  <div class="stats-error" id="stats-error" style="display: none;">
    <div class="error-icon">‚ö†Ô∏è</div>
    <div class="error-message">
      <p>GitHub API„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</p>
      <p class="error-detail">„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ</p>
    </div>
  </div>
</div>

<style>
.github-stats-container {
  background: linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, rgba(30, 41, 59, 0.8) 100%);
  border-radius: 16px;
  border: 1px solid rgba(251, 146, 60, 0.2);
  padding: 24px;
  margin: 24px 0;
  backdrop-filter: blur(10px);
}

.stats-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.stats-title {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 20px;
  font-weight: 700;
  color: white;
  margin: 0;
}

.github-icon {
  font-size: 24px;
}

.stats-loading {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #cbd5e1;
  font-size: 14px;
}

.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(251, 146, 60, 0.2);
  border-top: 2px solid #fb923d;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 16px;
  margin-bottom: 24px;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  border: 1px solid rgba(251, 146, 60, 0.2);
  border-radius: 12px;
  padding: 16px;
  text-align: center;
  transition: all 0.3s ease;
}

.stat-card:hover {
  border-color: rgba(251, 146, 60, 0.4);
  transform: translateY(-2px);
}

.stat-icon {
  font-size: 24px;
  margin-bottom: 8px;
}

.stat-value {
  display: block;
  font-size: 24px;
  font-weight: 700;
  color: #fb923d;
  margin-bottom: 4px;
}

.stat-label {
  font-size: 12px;
  color: #cbd5e1;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.language-chart {
  margin-bottom: 24px;
}

.chart-title,
.activity-title {
  font-size: 16px;
  font-weight: 600;
  color: #ffffff;
  margin-bottom: 16px;
}

.language-summary {
  background: rgba(30, 41, 59, 0.3);
  border-radius: 12px;
  padding: 20px;
  border: 1px solid rgba(251, 146, 60, 0.1);
}

.language-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  justify-content: center;
}

.language-tag {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  background: rgba(15, 23, 42, 0.5);
  border-radius: 20px;
  border: 1px solid;
  transition: all 0.3s ease;
  cursor: default;
}

.language-tag:hover {
  transform: translateY(-2px);
  background: rgba(15, 23, 42, 0.7);
}

.language-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  flex-shrink: 0;
}

.language-text {
  font-size: 14px;
  color: white;
  font-weight: 500;
}

.language-percentage {
  font-size: 12px;
  color: #fb923d;
  font-weight: 600;
}

.activity-timeline {
  display: flex;
  flex-direction: column;
  gap: 12px;
  max-height: 200px;
  overflow-y: auto;
}

.activity-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: rgba(30, 41, 59, 0.3);
  border-radius: 8px;
  border-left: 3px solid #fb923d;
}

.activity-icon {
  font-size: 16px;
  width: 24px;
  text-align: center;
}

.activity-content {
  flex: 1;
}

.activity-message {
  color: #ffffff;
  font-size: 14px;
  margin-bottom: 4px;
}

.activity-time {
  color: #64748b;
  font-size: 12px;
}

.stats-error {
  text-align: center;
  padding: 40px;
}

.error-icon {
  font-size: 48px;
  margin-bottom: 16px;
}

.error-message p {
  color: #cbd5e1;
  margin-bottom: 8px;
}

.error-detail {
  color: #64748b;
  font-size: 14px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .github-stats-container {
    padding: 16px;
    margin: 16px 0;
  }
  
  .stats-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 12px;
  }
  
  .stats-title {
    font-size: 18px;
  }
  
  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
    margin-bottom: 20px;
  }
  
  .stat-card {
    padding: 12px;
  }
  
  .stat-value {
    font-size: 20px;
  }
  
  .stat-label {
    font-size: 11px;
  }
  
  .language-summary {
    padding: 16px;
  }
  
  .language-tags {
    gap: 8px;
  }
  
  .language-tag {
    padding: 6px 12px;
  }
  
  .language-text {
    font-size: 12px;
  }
  
  .language-percentage {
    font-size: 10px;
  }
  
  .chart-title,
  .activity-title {
    font-size: 14px;
    margin-bottom: 12px;
    color: #ffffff;
  }
  
  .activity-timeline {
    max-height: 150px;
  }
  
  .activity-item {
    padding: 10px;
  }
  
  .activity-message {
    font-size: 13px;
  }
}

@media (max-width: 480px) {
  .github-stats-container {
    padding: 12px;
    border-radius: 12px;
  }
  
  .stats-title {
    font-size: 16px;
  }
  
  .github-icon {
    font-size: 20px;
  }
  
  .stats-grid {
    grid-template-columns: 1fr;
    gap: 10px;
    margin-bottom: 16px;
  }
  
  .stat-card {
    padding: 10px;
  }
  
  .stat-icon {
    font-size: 20px;
    margin-bottom: 6px;
  }
  
  .stat-value {
    font-size: 18px;
  }
  
  .stat-label {
    font-size: 10px;
  }
  
  .language-chart,
  .recent-activity {
    margin-bottom: 16px;
  }
  
  .language-summary {
    padding: 12px;
  }
  
  .language-tags {
    gap: 6px;
    justify-content: flex-start;
  }
  
  .language-tag {
    padding: 4px 8px;
    flex-direction: column;
    gap: 4px;
    text-align: center;
    min-width: 60px;
  }
  
  .language-dot {
    width: 6px;
    height: 6px;
    align-self: center;
  }
  
  .language-text {
    font-size: 10px;
  }
  
  .language-percentage {
    font-size: 9px;
  }
  
  .activity-timeline {
    max-height: 120px;
    gap: 8px;
  }
  
  .activity-item {
    padding: 8px;
    gap: 8px;
  }
  
  .activity-icon {
    font-size: 14px;
    width: 20px;
  }
  
  .activity-message {
    font-size: 12px;
  }
  
  .activity-time {
    font-size: 11px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', async function() {
  const githubUsername = 'nowex35';
  const loadingEl = document.getElementById('stats-loading');
  const contentEl = document.getElementById('stats-content');
  const errorEl = document.getElementById('stats-error');
  
  const languageColors = {
    'JavaScript': '#f1e05a',
    'TypeScript': '#2b7489',
    'Python': '#3572A5',
    'Go': '#00ADD8',
    'Java': '#b07219',
    'C++': '#f34b7d',
    'C': '#555555',
    'HTML': '#e34c26',
    'CSS': '#563d7c',
    'Shell': '#89e051',
    'Dockerfile': '#384d54',
    'Mojo': '#ff6b35'
  };
  
  // Cache management
  const CACHE_KEY = `github-stats-${githubUsername}`;
  const CACHE_DURATION = 60 * 60 * 1000; // 1 hour
  
  function getCachedData() {
    try {
      const cached = localStorage.getItem(CACHE_KEY);
      if (!cached) return null;
      
      const { data, timestamp } = JSON.parse(cached);
      const isExpired = Date.now() - timestamp > CACHE_DURATION;
      
      return isExpired ? null : data;
    } catch (error) {
      console.warn('Cache read error:', error);
      return null;
    }
  }
  
  function setCachedData(data) {
    try {
      const cacheEntry = {
        data,
        timestamp: Date.now()
      };
      localStorage.setItem(CACHE_KEY, JSON.stringify(cacheEntry));
    } catch (error) {
      console.warn('Cache write error:', error);
    }
  }

  async function fetchGitHubData() {
    try {
      // User info
      const userResponse = await fetch(`https://api.github.com/users/${githubUsername}`);
      if (!userResponse.ok) {
        if (userResponse.status === 403) {
          throw new Error('RATE_LIMIT');
        }
        throw new Error(`HTTP ${userResponse.status}: ${userResponse.statusText}`);
      }
      const userData = await userResponse.json();
      
      // Check for API error messages
      if (userData.message) {
        if (userData.message.includes('rate limit')) {
          throw new Error('RATE_LIMIT');
        }
        throw new Error(userData.message);
      }
      
      // Repositories
      const reposResponse = await fetch(`https://api.github.com/users/${githubUsername}/repos?sort=updated&per_page=100`);
      if (!reposResponse.ok) {
        if (reposResponse.status === 403) {
          throw new Error('RATE_LIMIT');
        }
        throw new Error(`HTTP ${reposResponse.status}: ${reposResponse.statusText}`);
      }
      const reposData = await reposResponse.json();
      
      // Recent events
      const eventsResponse = await fetch(`https://api.github.com/users/${githubUsername}/events/public?per_page=10`);
      if (!eventsResponse.ok) {
        if (eventsResponse.status === 403) {
          throw new Error('RATE_LIMIT');
        }
        throw new Error(`HTTP ${eventsResponse.status}: ${eventsResponse.statusText}`);
      }
      const eventsData = await eventsResponse.json();
      
      const data = {
        user: userData,
        repos: reposData,
        events: eventsData
      };
      
      // Cache the successful response
      setCachedData(data);
      
      return data;
    } catch (error) {
      console.error('GitHub API Error:', error);
      throw error;
    }
  }
  
  function calculateStats(data) {
    const { user, repos, events } = data;
    
    // Calculate commit count from recent events
    const commitEvents = events.filter(event => event.type === 'PushEvent');
    const commitCount = commitEvents.reduce((total, event) => {
      return total + (event.payload.commits ? event.payload.commits.length : 0);
    }, 0);
    
    // Calculate language distribution
    const languages = {};
    repos.forEach(repo => {
      if (repo.language) {
        languages[repo.language] = (languages[repo.language] || 0) + 1;
      }
    });
    
    // Sort languages by usage
    const sortedLanguages = Object.entries(languages)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);
    
    // Calculate total stars
    const totalStars = repos.reduce((total, repo) => total + repo.stargazers_count, 0);
    
    return {
      commitCount,
      repoCount: repos.length,
      starCount: totalStars,
      primaryLanguage: sortedLanguages[0] ? sortedLanguages[0][0] : 'N/A',
      languages: sortedLanguages,
      recentActivity: events.slice(0, 5)
    };
  }
  
  function renderStats(stats) {
    // Update stat cards
    document.getElementById('commit-count').textContent = stats.commitCount;
    document.getElementById('repo-count').textContent = stats.repoCount;
    document.getElementById('star-count').textContent = stats.starCount;
    document.getElementById('language-primary').textContent = stats.primaryLanguage;
    
    // Render language summary
    const languageSummary = document.getElementById('language-summary');
    
    languageSummary.innerHTML = '';
    
    const totalRepos = stats.languages.reduce((sum, [, count]) => sum + count, 0);
    
    // Create language tags
    const languageTags = document.createElement('div');
    languageTags.className = 'language-tags';
    
    stats.languages.forEach(([language, count]) => {
      const repoPercentage = ((count / totalRepos) * 100).toFixed(1);
      const color = languageColors[language] || '#fb923d';
      
      const languageTag = document.createElement('div');
      languageTag.className = 'language-tag';
      languageTag.style.borderColor = color;
      languageTag.innerHTML = `
        <div class="language-dot" style="background-color: ${color};"></div>
        <span class="language-text" style="color: #ffffff !important;">${language}</span>
        <span class="language-percentage">${repoPercentage}%</span>
      `;
      languageTags.appendChild(languageTag);
    });
    
    languageSummary.appendChild(languageTags);
    
    // Render recent activity
    const activityTimeline = document.getElementById('activity-timeline');
    activityTimeline.innerHTML = '';
    
    stats.recentActivity.forEach(event => {
      const activityItem = document.createElement('div');
      activityItem.className = 'activity-item';
      
      let icon = 'üìù';
      let message = 'Unknown activity';
      
      switch (event.type) {
        case 'PushEvent':
          icon = 'üî•';
          const commitCount = event.payload.commits ? event.payload.commits.length : 0;
          message = `Pushed ${commitCount} commit${commitCount !== 1 ? 's' : ''} to ${event.repo.name}`;
          break;
        case 'CreateEvent':
          icon = '‚ú®';
          message = `Created ${event.payload.ref_type} in ${event.repo.name}`;
          break;
        case 'IssuesEvent':
          icon = 'üêõ';
          message = `${event.payload.action} issue in ${event.repo.name}`;
          break;
        case 'PullRequestEvent':
          icon = 'üîÄ';
          message = `${event.payload.action} pull request in ${event.repo.name}`;
          break;
        case 'WatchEvent':
          icon = '‚≠ê';
          message = `Starred ${event.repo.name}`;
          break;
      }
      
      const timeAgo = getTimeAgo(new Date(event.created_at));
      
      activityItem.innerHTML = `
        <div class="activity-icon">${icon}</div>
        <div class="activity-content">
          <div class="activity-message">${message}</div>
          <div class="activity-time">${timeAgo}</div>
        </div>
      `;
      
      activityTimeline.appendChild(activityItem);
    });
  }
  
  function getTimeAgo(date) {
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) return 'Just now';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
    return `${Math.floor(diffInSeconds / 86400)}d ago`;
  }
  
  function showError(errorType = 'GENERAL') {
    loadingEl.style.display = 'none';
    contentEl.style.display = 'none';
    errorEl.style.display = 'block';
    
    const errorMessage = errorEl.querySelector('.error-message p');
    const errorDetail = errorEl.querySelector('.error-detail');
    
    if (errorType === 'RATE_LIMIT') {
      errorMessage.textContent = 'GitHub API „É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü';
      errorDetail.textContent = '„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØË°®Á§∫„Åó„Åæ„Åô';
    } else {
      errorMessage.textContent = 'GitHub API„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
      errorDetail.textContent = '„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØË°®Á§∫„Åó„Åæ„Åô';
    }
  }
  
  function showContent() {
    loadingEl.style.display = 'none';
    errorEl.style.display = 'none';
    contentEl.style.display = 'block';
  }
  
  function showCachedData(data) {
    const stats = calculateStats(data);
    renderStats(stats);
    showContent();
    
    // Add cache indicator
    const statsTitle = document.querySelector('.stats-title');
    if (statsTitle && !statsTitle.querySelector('.cache-indicator')) {
      const indicator = document.createElement('span');
      indicator.className = 'cache-indicator';
      indicator.textContent = '(„Ç≠„É£„ÉÉ„Ç∑„É•)';
      indicator.style.fontSize = '12px';
      indicator.style.color = '#64748b';
      indicator.style.marginLeft = '8px';
      statsTitle.appendChild(indicator);
    }
  }
  
  // Initialize with cache-first strategy
  async function initialize() {
    // First, try to load from cache
    const cachedData = getCachedData();
    
    if (cachedData) {
      // Show cached data and stop here
      showCachedData(cachedData);
      return;
    }
    
    // No cache available, fetch fresh data
    try {
      const data = await fetchGitHubData();
      const stats = calculateStats(data);
      renderStats(stats);
      showContent();
    } catch (error) {
      console.error('Error fetching GitHub data:', error);
      if (error.message === 'RATE_LIMIT') {
        showError('RATE_LIMIT');
      } else {
        showError('GENERAL');
      }
    }
  }
  
  initialize();
});
</script>