---
// 3D Interactive Skill Navigator Component
const skills = [
  { name: "Backend Development", level: 5, category: "development", x: 0, y: 0, z: 0 },
  { name: "Go", level: 4, category: "language", x: 2, y: 1, z: -1 },
  { name: "TypeScript", level: 4, category: "language", x: -2, y: 1, z: -1 },
  { name: "Python", level: 4, category: "language", x: 1, y: -1, z: 2 },
  { name: "Frontend Development", level: 3, category: "development", x: -1, y: 2, z: 1 },
  { name: "React", level: 3, category: "framework", x: -3, y: 0, z: 1 },
  { name: "Next.js", level: 3, category: "framework", x: -1, y: -2, z: -2 },
  { name: "Infrastructure", level: 3, category: "development", x: 2, y: -1, z: 1 },
  { name: "Docker", level: 3, category: "tool", x: 3, y: 1, z: 0 },
  { name: "AWS", level: 3, category: "cloud", x: 1, y: 2, z: -2 },
  { name: "Business Understanding", level: 4, category: "soft", x: -2, y: -1, z: 2 },
  { name: "FastAPI", level: 4, category: "framework", x: 0, y: -2, z: 1 },
  { name: "PostgreSQL", level: 3, category: "database", x: 2, y: 0, z: 2 },
  { name: "Redis", level: 3, category: "database", x: -3, y: -1, z: 0 },
  { name: "Mojo", level: 2, category: "language", x: 0, y: 3, z: -1 }
];

const categories = {
  development: { color: "from-orange-400 to-red-500", bgColor: "bg-orange-500/20", borderColor: "border-orange-500/30" },
  language: { color: "from-blue-400 to-blue-600", bgColor: "bg-blue-500/20", borderColor: "border-blue-500/30" },
  framework: { color: "from-green-400 to-green-600", bgColor: "bg-green-500/20", borderColor: "border-green-500/30" },
  tool: { color: "from-purple-400 to-purple-600", bgColor: "bg-purple-500/20", borderColor: "border-purple-500/30" },
  cloud: { color: "from-yellow-400 to-yellow-600", bgColor: "bg-yellow-500/20", borderColor: "border-yellow-500/30" },
  database: { color: "from-pink-400 to-pink-600", bgColor: "bg-pink-500/20", borderColor: "border-pink-500/30" },
  soft: { color: "from-indigo-400 to-indigo-600", bgColor: "bg-indigo-500/20", borderColor: "border-indigo-500/30" }
};
---

<div class="skill-navigator-container" id="skill-navigator">
  <div class="skill-canvas" id="skill-canvas">
    <div class="skill-space" id="skill-space">
      {skills.map((skill, index) => {
        const category = categories[skill.category];
        const size = Math.max(0.8, skill.level * 0.2);
        const intensity = skill.level * 20;
        
        return (
          <div 
            class={`skill-node ${category.bgColor} ${category.borderColor}`}
            data-skill={skill.name}
            data-level={skill.level}
            data-category={skill.category}
            style={`
              --x: ${skill.x};
              --y: ${skill.y};
              --z: ${skill.z};
              --size: ${size};
              --intensity: ${intensity}%;
            `}
          >
            <div class={`skill-core bg-gradient-to-br ${category.color}`}>
              <span class="skill-flame">üî•</span>
            </div>
            <div class="skill-label">
              <span class="skill-name">{skill.name}</span>
              <div class="skill-level">
                {Array.from({ length: 5 }, (_, i) => (
                  <span class={i < skill.level ? "active" : ""}></span>
                ))}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
  
  <div class="skill-controls">
    <button class="control-btn" data-action="rotate">üîÑ</button>
    <button class="control-btn" data-action="zoom-in">üîç+</button>
    <button class="control-btn" data-action="zoom-out">üîç-</button>
    <button class="control-btn" data-action="reset">üéØ</button>
  </div>
  
  <div class="skill-legend">
    {Object.entries(categories).map(([key, category]) => (
      <div class={`legend-item ${category.bgColor} ${category.borderColor}`}>
        <div class={`legend-color bg-gradient-to-r ${category.color}`}></div>
        <span class="legend-text">{key.charAt(0).toUpperCase() + key.slice(1)}</span>
      </div>
    ))}
  </div>
  
  <div class="skill-tooltip" id="skill-tooltip">
    <div class="tooltip-content">
      <h3 class="tooltip-title"></h3>
      <div class="tooltip-level"></div>
      <p class="tooltip-description"></p>
    </div>
  </div>
</div>

<style>
.skill-navigator-container {
  position: relative;
  width: 100%;
  height: 500px;
  background: linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, rgba(30, 41, 59, 0.8) 100%);
  border-radius: 20px;
  border: 2px solid rgba(251, 146, 60, 0.2);
  overflow: hidden;
  perspective: 1000px;
}

.skill-canvas {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;
}

.skill-space {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 400px;
  height: 400px;
  transform: translate(-50%, -50%) rotateX(15deg) rotateY(0deg);
  transform-style: preserve-3d;
  transition: transform 0.5s ease;
}

.skill-node {
  position: absolute;
  width: calc(60px * var(--size));
  height: calc(60px * var(--size));
  transform: translate3d(
    calc(var(--x) * 60px),
    calc(var(--y) * 60px),
    calc(var(--z) * 60px)
  );
  border-radius: 50%;
  border: 2px solid;
  cursor: pointer;
  transition: all 0.3s ease;
  transform-style: preserve-3d;
}

.skill-node:hover {
  transform: translate3d(
    calc(var(--x) * 60px),
    calc(var(--y) * 60px),
    calc(var(--z) * 60px + 10px)
  ) scale(1.2);
  z-index: 10;
}

.skill-core {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  box-shadow: 0 0 20px rgba(251, 146, 60, var(--intensity));
}

.skill-flame {
  font-size: calc(20px * var(--size));
  animation: flicker 2s ease-in-out infinite alternate;
}

.skill-label {
  position: absolute;
  top: 100%;
  left: 50%;
  transform: translateX(-50%);
  margin-top: 10px;
  text-align: center;
  white-space: nowrap;
  opacity: 0;
  transition: opacity 0.3s ease;
  background: rgba(15, 23, 42, 0.9);
  padding: 8px 12px;
  border-radius: 8px;
  border: 1px solid rgba(251, 146, 60, 0.3);
  backdrop-filter: blur(10px);
}

.skill-node:hover .skill-label {
  opacity: 1;
}

.skill-name {
  display: block;
  color: white;
  font-size: 12px;
  font-weight: 600;
  margin-bottom: 4px;
}

.skill-level {
  display: flex;
  gap: 2px;
  justify-content: center;
}

.skill-level span {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: rgba(251, 146, 60, 0.3);
  transition: background 0.3s ease;
}

.skill-level span.active {
  background: #fb923d;
  box-shadow: 0 0 6px #fb923d;
}

.skill-controls {
  position: absolute;
  top: 20px;
  right: 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.control-btn {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(15, 23, 42, 0.8);
  border: 1px solid rgba(251, 146, 60, 0.3);
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.control-btn:hover {
  background: rgba(251, 146, 60, 0.2);
  border-color: rgba(251, 146, 60, 0.5);
  transform: scale(1.1);
}

.skill-legend {
  position: absolute;
  bottom: 20px;
  left: 20px;
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  max-width: 300px;
}

.legend-item {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 4px 8px;
  border-radius: 12px;
  border: 1px solid;
  backdrop-filter: blur(10px);
}

.legend-color {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

.legend-text {
  color: white;
  font-size: 10px;
  font-weight: 500;
  text-transform: capitalize;
}

.skill-tooltip {
  position: absolute;
  top: 20px;
  left: 20px;
  max-width: 300px;
  background: rgba(15, 23, 42, 0.95);
  border: 1px solid rgba(251, 146, 60, 0.3);
  border-radius: 12px;
  padding: 16px;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
  backdrop-filter: blur(20px);
}

.tooltip-title {
  color: white;
  font-size: 18px;
  font-weight: 700;
  margin-bottom: 8px;
}

.tooltip-level {
  display: flex;
  gap: 4px;
  margin-bottom: 12px;
}

.tooltip-level span {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: rgba(251, 146, 60, 0.3);
}

.tooltip-level span.active {
  background: #fb923d;
  box-shadow: 0 0 8px #fb923d;
}

.tooltip-description {
  color: #cbd5e1;
  font-size: 14px;
  line-height: 1.5;
}

@keyframes flicker {
  0% { transform: scale(1) rotate(0deg); opacity: 1; }
  50% { transform: scale(1.1) rotate(2deg); opacity: 0.8; }
  100% { transform: scale(1) rotate(-1deg); opacity: 1; }
}

@media (max-width: 768px) {
  .skill-navigator-container {
    height: 400px;
  }
  
  .skill-space {
    width: 300px;
    height: 300px;
  }
  
  .skill-controls {
    top: 10px;
    right: 10px;
  }
  
  .control-btn {
    width: 35px;
    height: 35px;
    font-size: 14px;
  }
  
  .skill-legend {
    bottom: 10px;
    left: 10px;
    max-width: 250px;
  }
  
  .skill-tooltip {
    top: 10px;
    left: 10px;
    max-width: 250px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const skillSpace = document.getElementById('skill-space');
  const skillNodes = document.querySelectorAll('.skill-node');
  const tooltip = document.getElementById('skill-tooltip');
  const controls = document.querySelectorAll('.control-btn');
  
  let rotation = { x: 15, y: 0 };
  let isRotating = false;
  let mousePosition = { x: 0, y: 0 };
  
  const skillDescriptions = {
    "Backend Development": "„Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆË®≠Ë®à„ÉªÂÆüË£Ö„ÄÅAPIÈñãÁô∫„ÄÅ„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÇíÂæóÊÑè„Å®„Åó„Åæ„Åô„ÄÇ",
    "Go": "È´òÊÄßËÉΩ„Å™Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇÑ„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„Çπ„ÅÆÈñãÁô∫„Å´‰ΩøÁî®„ÄÇ‰∏¶Ë°åÂá¶ÁêÜ„ÇÑ„ÇØ„É™„Éº„É≥„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÂÆüË∑µ„ÄÇ",
    "TypeScript": "ÂûãÂÆâÂÖ®„Å™Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„ÄÇReact/Next.js„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅÆÂÆüÁî®ÁµåÈ®ìË±äÂØå„ÄÇ",
    "Python": "FastAPI„Çí‰Ωø„Å£„ÅüWebAPIÈñãÁô∫„ÄÅ„Éá„Éº„ÇøÂá¶ÁêÜ„ÄÅÊ©üÊ¢∞Â≠¶ÁøíÈñ¢ÈÄ£„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅßÊ¥ªÁî®„ÄÇ",
    "Frontend Development": "React„ÄÅNext.js„Çí‰∏≠ÂøÉ„Å®„Åó„ÅüÁèæ‰ª£ÁöÑ„Å™„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫„ÄÇUX/UI„Å´„ÇÇÈÖçÊÖÆ„Åó„ÅüÂÆüË£Ö„ÄÇ",
    "React": "„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàË®≠Ë®à„ÄÅÁä∂ÊÖãÁÆ°ÁêÜ„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ„Å´Á≤æÈÄö„ÄÇHooks„ÄÅContext API „ÅÆÊ¥ªÁî®„ÄÇ",
    "Next.js": "SSR/SSG„ÄÅAPI Routes„ÄÅImage Optimization„Å™„Å©„ÅÆÊ©üËÉΩ„ÇíÊ¥ªÁî®„Åó„ÅüWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„ÄÇ",
    "Infrastructure": "Docker„ÄÅAWS„ÄÅCI/CD„Éë„Ç§„Éó„É©„Ç§„É≥„ÅÆÊßãÁØâ„ÉªÈÅãÁî®„ÄÇ„Ç§„É≥„Éï„É© as Code „ÅÆÂÆüË∑µ„ÄÇ",
    "Docker": "„Ç≥„É≥„ÉÜ„ÉäÂåñ„Å´„Çà„Çã„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÂèØÊê¨ÊÄßÂêë‰∏ä„ÄÅÈñãÁô∫Áí∞Â¢É„ÅÆÊ®ôÊ∫ñÂåñ„ÇíÂÆüÁèæ„ÄÇ",
    "AWS": "EC2„ÄÅLambda„ÄÅRDS„ÄÅS3Á≠â„ÅÆ„Çµ„Éº„Éì„Çπ„ÇíÊ¥ªÁî®„Åó„Åü„ÇØ„É©„Ç¶„Éâ„Ç§„É≥„Éï„É©„ÅÆÊßãÁØâ„ÉªÈÅãÁî®„ÄÇ",
    "Business Understanding": "Ë¶Å‰ª∂ÂÆöÁæ©„Åã„ÇâÈÅãÁî®„Åæ„Åß„ÄÅ„Éì„Ç∏„Éç„ÇπË¶ñÁÇπ„ÇíÊåÅ„Å£„ÅüÊäÄË°ìÁöÑÊÑèÊÄùÊ±∫ÂÆö„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ",
    "FastAPI": "È´òÊÄßËÉΩ„Å™Python Web API„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÄÇËá™Âãï„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê„ÄÅÂûãÂÆâÂÖ®ÊÄß„ÇíÊ¥ªÁî®„ÄÇ",
    "PostgreSQL": "„É™„É¨„Éº„Ç∑„Éß„Éä„É´„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆË®≠Ë®à„ÉªÊúÄÈÅ©Âåñ„ÄÇË§áÈõë„Å™„ÇØ„Ç®„É™„ÇÑ„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜ„Å´ÂØæÂøú„ÄÇ",
    "Redis": "„Ç≠„É£„ÉÉ„Ç∑„É•„ÄÅ„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†Ê©üËÉΩ„ÅÆÂÆüË£Ö„Åß„ÅÆNoSQL„Éá„Éº„Çø„Éô„Éº„ÇπÊ¥ªÁî®„ÄÇ",
    "Mojo": "AI„ÉªÊ©üÊ¢∞Â≠¶ÁøíÂêë„Åë„ÅÆÊ¨°‰∏ñ‰ª£„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÄÇWeb„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØÈñãÁô∫„Å´„ÉÅ„É£„É¨„É≥„Ç∏‰∏≠„ÄÇ"
  };
  
  // Auto rotation
  function startAutoRotation() {
    if (!isRotating) {
      isRotating = true;
      const autoRotate = () => {
        if (isRotating) {
          rotation.y += 0.5;
          updateRotation();
          requestAnimationFrame(autoRotate);
        }
      };
      autoRotate();
    }
  }
  
  function stopAutoRotation() {
    isRotating = false;
  }
  
  function updateRotation() {
    skillSpace.style.transform = `translate(-50%, -50%) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg)`;
  }
  
  // Mouse interaction
  let isDragging = false;
  let lastMousePosition = { x: 0, y: 0 };
  
  skillSpace.addEventListener('mousedown', (e) => {
    isDragging = true;
    stopAutoRotation();
    lastMousePosition = { x: e.clientX, y: e.clientY };
    skillSpace.style.cursor = 'grabbing';
  });
  
  document.addEventListener('mousemove', (e) => {
    mousePosition = { x: e.clientX, y: e.clientY };
    
    if (isDragging) {
      const deltaX = e.clientX - lastMousePosition.x;
      const deltaY = e.clientY - lastMousePosition.y;
      
      rotation.y += deltaX * 0.5;
      rotation.x -= deltaY * 0.5;
      rotation.x = Math.max(-60, Math.min(60, rotation.x));
      
      updateRotation();
      lastMousePosition = { x: e.clientX, y: e.clientY };
    }
  });
  
  document.addEventListener('mouseup', () => {
    if (isDragging) {
      isDragging = false;
      skillSpace.style.cursor = 'grab';
      setTimeout(startAutoRotation, 2000);
    }
  });
  
  // Touch support
  let lastTouchPosition = { x: 0, y: 0 };
  
  skillSpace.addEventListener('touchstart', (e) => {
    e.preventDefault();
    stopAutoRotation();
    const touch = e.touches[0];
    lastTouchPosition = { x: touch.clientX, y: touch.clientY };
  });
  
  skillSpace.addEventListener('touchmove', (e) => {
    e.preventDefault();
    const touch = e.touches[0];
    const deltaX = touch.clientX - lastTouchPosition.x;
    const deltaY = touch.clientY - lastTouchPosition.y;
    
    rotation.y += deltaX * 0.5;
    rotation.x -= deltaY * 0.5;
    rotation.x = Math.max(-60, Math.min(60, rotation.x));
    
    updateRotation();
    lastTouchPosition = { x: touch.clientX, y: touch.clientY };
  });
  
  skillSpace.addEventListener('touchend', () => {
    setTimeout(startAutoRotation, 2000);
  });
  
  // Skill node interactions
  skillNodes.forEach(node => {
    node.addEventListener('mouseenter', (e) => {
      const skillName = node.dataset.skill;
      const skillLevel = parseInt(node.dataset.level);
      const description = skillDescriptions[skillName] || "„Åì„ÅÆ„Çπ„Ç≠„É´„Å´„Å§„ÅÑ„Å¶„ÅÆË©≥Á¥∞ÊÉÖÂ†±";
      
      tooltip.querySelector('.tooltip-title').textContent = skillName;
      
      const levelContainer = tooltip.querySelector('.tooltip-level');
      levelContainer.innerHTML = '';
      for (let i = 0; i < 5; i++) {
        const levelSpan = document.createElement('span');
        if (i < skillLevel) levelSpan.classList.add('active');
        levelContainer.appendChild(levelSpan);
      }
      
      tooltip.querySelector('.tooltip-description').textContent = description;
      tooltip.style.opacity = '1';
    });
    
    node.addEventListener('mouseleave', () => {
      tooltip.style.opacity = '0';
    });
  });
  
  // Control buttons
  controls.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const action = btn.dataset.action;
      stopAutoRotation();
      
      switch(action) {
        case 'rotate':
          startAutoRotation();
          break;
        case 'zoom-in':
          skillSpace.style.transform += ' scale(1.2)';
          break;
        case 'zoom-out':
          skillSpace.style.transform += ' scale(0.8)';
          break;
        case 'reset':
          rotation = { x: 15, y: 0 };
          skillSpace.style.transform = 'translate(-50%, -50%) rotateX(15deg) rotateY(0deg)';
          setTimeout(startAutoRotation, 1000);
          break;
      }
    });
  });
  
  // Initialize
  skillSpace.style.cursor = 'grab';
  setTimeout(startAutoRotation, 2000);
});
</script>