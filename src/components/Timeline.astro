---
import TimelineItem from './TimelineItem.astro';

// Timeline data
const timelineData = [
  {
    date: "2025-9",
    title: "freeeサマーインターン参加",
    description: "チームに配属され、UI改善やフィルタリング機能の実装を行った。",
    metrics: ["フリー株式会社"]
  },
  {
    date: "2025-8",
    title: "はてなサマーインターン参加",
    description: "Web開発に関わる講義の受講及びエンジニアからのレビュー・FBありの課題に取り組む。",
    metrics: ["株式会社はてな"]
  },
  {
    date: "2024-10",
    title: "応用情報技術者試験 合格",
    description: "",
    metrics: []
  },
  {
    date: "2024-6",
    title: "初のWebサイト開発/公開",
    description: "学園祭公式サイト制作。Vueを使用したSSGサイト。",
    metrics: ["サイト訪問者: 10000+"]
  },
  {
    date: "2024-3",
    title: "X Hackathon#2 全体2位 ",
    description: "初めてのハッカソン参加、お題となったクライアントのニーズに合った作成物であったことを評価された。",
    metrics: []
  },
  {
    date: "2024-3",
    title: "海外先進大学スポーツマネジメント研修@ハワイ大学マノア校",
    description: "NCAA1部に所属するハワイ大学にてスポーツマネジメント及びスポーツビジネスについて学ぶ。これを機に、スポーツビジネス領域に興味を持つ。",
    metrics: []
  },
  {
    date: "2024-2～2024-8",
    title: "建築系IT企業 インターン",
    description: "建築関連ソフトウェアの開発に携わる。初めて実務の現場に出社して働き、社会人エンジニアとしての働き方も学ぶ。",
    metrics: []
  },
  {
    date: "2024",
    title: "Webアプリ開発開始",
    description: "Web開発の基礎学習。HTML/CSS/JavaScript",
    metrics: []
  },
  {
    date: "2023～",
    title: "大学入学・CS学習",
    description: "筑波大学CS専攻。アルゴリズム・データ構造の体系的学習",
    metrics: ["GPA: 3.7"]
  },
];
---

<div class="growth-visualization" id="growth-visualization">
  <div class="growth-header">
    <h3 class="growth-title">
      <span class="growth-icon">📈</span>
      Experience&Career
    </h3>
  </div>
  
  <div class="timeline-axis">
    {timelineData.map(item => (
      <TimelineItem 
        date={item.date}
        title={item.title}
        description={item.description}
        metrics={item.metrics}
      />
    ))}
  </div>
</div>

<style>
.growth-visualization {
  background: linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, rgba(30, 41, 59, 0.8) 100%);
  border-radius: 24px;
  border: 1px solid rgba(251, 146, 60, 0.2);
  padding: 48px 32px;
  margin: 32px 0;
  backdrop-filter: blur(10px);
}

.growth-header {
  text-align: center;
  margin-bottom: 24px;
}

.growth-title {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  font-size: 36px;
  font-weight: 900;
  color: white;
  margin-bottom: 12px;
  letter-spacing: -0.025em;
}

.growth-icon {
  font-size: 42px;
}

.timeline-axis {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 40px;
  padding: 20px 0;
}

.timeline-axis::before {
  content: '';
  position: absolute;
  left: 30px;
  top: 20px;
  bottom: 20px;
  width: 2px;
  background: linear-gradient(to bottom, #fb923d, rgba(251, 146, 60, 0.2));
}

@media (max-width: 768px) {
  .growth-visualization {
    padding: 16px;
    margin: 16px 0;
  }
  
  .growth-header {
    margin-bottom: 20px;
  }
  
  .growth-title {
    font-size: 20px;
    flex-direction: column;
    gap: 4px;
  }
  
  .growth-icon {
    font-size: 24px;
  }
  
  /* Timeline adjustments */
  .timeline-axis {
    gap: 30px;
    padding: 16px 0;
  }
  
  .timeline-axis::before {
    left: 12px;
  }
}

@media (max-width: 480px) {
  .growth-visualization {
    padding: 12px;
    border-radius: 12px;
  }
  
  .growth-title {
    font-size: 18px;
  }
  
  .growth-icon {
    font-size: 20px;
  }
  
  .timeline-axis {
    gap: 24px;
  }
  
  .timeline-axis::before {
    left: 8px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  
  // Intersection Observer for timeline animation
  const observeTimeline = () => {
    const timelineItems = document.querySelectorAll('.timeline-item');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.opacity = '1';
          (entry.target as HTMLElement).style.transform = 'translateY(0)';
        }
      });
    }, { threshold: 0.3 });
    
    timelineItems.forEach((item, index) => {
      const element = item as HTMLElement;
      element.style.opacity = '0';
      element.style.transform = 'translateY(20px)';
      element.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
      observer.observe(item);
    });
  };
  
  // Initialize animations
  observeTimeline();
});
</script>